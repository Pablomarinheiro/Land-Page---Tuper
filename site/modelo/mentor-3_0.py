# -*- coding: utf-8 -*-
import random
import time
from typing import Dict, List, Optional, Tuple

# --- BASE DE CONHECIMENTO ESTRUTURADA ---
# Agora, cada t√≥pico √© uma jornada com passos sequenciais.
BASE_CONHECIMENTO = {
    "produtividade": {
        "sinonimos": ["produzir", "foco", "efici√™ncia", "pomodoro", "organiza√ß√£o"],
        "passos": [
            {
                "conselho": "O primeiro passo para a super produtividade √© gerenciar sua energia, n√£o apenas seu tempo. Vamos come√ßar com a 'T√©cnica Pomodoro': trabalhe com foco total por 25 minutos e depois fa√ßa uma pausa curta de 5 minutos. Isso mant√©m sua mente afiada.",
                "pergunta": "Voc√™ j√° tentou usar um cron√¥metro para gerenciar suas tarefas assim?"
            },
            {
                "conselho": "√ìtimo! Agora que voc√™ est√° controlando os sprints de trabalho, vamos priorizar. Use a 'Matriz de Eisenhower': divida suas tarefas entre Urgente/N√£o Urgente e Importante/N√£o Importante. Foque no que √© Importante, seja urgente ou n√£o.",
                "pergunta": "Isso ajuda a clarear o que voc√™ deve fazer a seguir?"
            },
            {
                "conselho": "Excelente. O n√≠vel final √© o 'Time Blocking'. Em vez de uma lista de tarefas, aloque blocos de tempo espec√≠ficos no seu calend√°rio para cada atividade importante. 'Das 14h √†s 15h: Foco total no relat√≥rio X'. Isso protege seu tempo e cria compromissos reais.",
                "pergunta": "Pronto para tentar agendar seu pr√≥ximo dia dessa forma?"
            }
        ],
        "conclusao": "Voc√™ completou a jornada da Produtividade! Integrar essas tr√™s t√©cnicas far√° uma diferen√ßa enorme."
    },
    "orat√≥ria": {
        "sinonimos": ["falar em p√∫blico", "apresenta√ß√£o", "discurso", "comunica√ß√£o"],
        "passos": [
            {
                "conselho": "Para dominar a orat√≥ria, o segredo √© a estrutura. Antes de pensar nas palavras, defina sua 'Mensagem Central'. Qual √© a √öNICA coisa que voc√™ quer que sua audi√™ncia lembre? Todo o resto deve servir a essa mensagem.",
                "pergunta": "Voc√™ consegue definir a Mensagem Central da sua pr√≥xima apresenta√ß√£o em uma √∫nica frase?"
            },
            {
                "conselho": "Com a mensagem definida, crie um roteiro simples: 1) Abertura impactante (uma pergunta, um dado surpreendente), 2) Desenvolvimento (3 pontos que suportam sua mensagem) e 3) Fechamento (reforce a mensagem e fa√ßa uma chamada para a√ß√£o).",
                "pergunta": "Essa estrutura parece mais gerenci√°vel do que um texto gigante para decorar?"
            },
            {
                "conselho": "Finalmente, pratique a 'entrega'. Grave a si mesmo falando. Observe sua linguagem corporal, seu tom de voz e suas pausas. A naturalidade vem da pr√°tica deliberada, n√£o da decora√ß√£o. Respire fundo antes de come√ßar!",
                "pergunta": "Voc√™ se sente mais confiante para praticar agora?"
            }
        ],
        "conclusao": "Parab√©ns! Com estrutura e pr√°tica, voc√™ est√° no caminho para se tornar um comunicador memor√°vel."
    },
    "aprendizado": {
        "sinonimos": ["aprender", "estudar", "conhecimento", "estudo", "memorizar"],
        "passos": [
            {
                "conselho": "Para aprender de verdade, precisamos ser ativos, n√£o passivos. Comece com a 'T√©cnica Feynman': pegue um conceito e tente explic√°-lo em termos simples, como se fosse para uma crian√ßa. Isso revela imediatamente onde est√£o as lacunas no seu entendimento.",
                "pergunta": "Que tal tentar explicar o √∫ltimo conceito que voc√™ estudou agora?"
            },
            {
                "conselho": "Agora vamos solidificar o conhecimento. Use a 'Repeti√ß√£o Espa√ßada'. Em vez de revisar 10 vezes em um dia, revise uma vez por dia ao longo de v√°rias semanas. Ferramentas como o Anki automatizam isso e s√£o extremamente poderosas para a mem√≥ria de longo prazo.",
                "pergunta": "Voc√™ j√° usou algum sistema de flashcards para estudar?"
            },
            {
                "conselho": "Por fim, conecte o que voc√™ aprendeu com o que voc√™ j√° sabe. Crie analogias, met√°foras ou mapas mentais. O conhecimento n√£o deve ficar em 'caixas' isoladas. Quanto mais conex√µes voc√™ criar, mais forte ser√° a reten√ß√£o.",
                "pergunta": "Consegue pensar em uma analogia para algo que voc√™ aprendeu recentemente?"
            }
        ],
        "conclusao": "Fant√°stico! Com aprendizado ativo, repeti√ß√£o espa√ßada e conex√µes, voc√™ se tornou um mestre em aprender a aprender."
    }
}


class Topico:
    """ Representa um t√≥pico de conhecimento com sua jornada de aprendizado. """
    def __init__(self, nome, dados):
        self.nome = nome
        self.sinonimos = dados["sinonimos"]
        self.passos = dados["passos"]
        self.conclusao = dados["conclusao"]

    def obter_passo(self, numero_passo: int) -> Optional[Dict]:
        if 0 <= numero_passo < len(self.passos):
            return self.passos[numero_passo]
        return None

class Usuario:
    """ Gerencia o estado e o progresso do usu√°rio. """
    def __init__(self, nome: str):
        self.nome = nome
        self.progresso: Dict[str, int] = {}  # Ex: {"produtividade": 2}

    def obter_passo_atual(self, topico: str) -> int:
        return self.progresso.get(topico, 0)

    def avancar_passo(self, topico: str):
        passo_atual = self.obter_passo_atual(topico)
        self.progresso[topico] = passo_atual + 1

class Mentor:
    """ A intelig√™ncia central do TuperAI. """
    def __init__(self):
        self.topicos: List[Topico] = [Topico(nome, dados) for nome, dados in BASE_CONHECIMENTO.items()]
        self.topico_atual: Optional[Topico] = None

    def _encontrar_topico(self, entrada: str) -> Optional[Topico]:
        entrada = entrada.lower()
        # Procura por correspond√™ncia exata ou sin√¥nimos
        for topico in self.topicos:
            if entrada == topico.nome or entrada in topico.sinonimos:
                return topico
        return None
    
    def saudar(self, usuario: Usuario) -> str:
        topicos_disponiveis = ", ".join([t.nome for t in self.topicos])
        return (f"\nOl√°, {usuario.nome}! √â um prazer t√™-lo aqui.\n"
                f"Estou pronto para iniciarmos uma jornada de desenvolvimento.\n"
                f"Podemos focar em: **{topicos_disponiveis}**.\n"
                f"Qual √°rea voc√™ gostaria de aprimorar hoje?")

    def obter_resposta(self, entrada: str, usuario: Usuario) -> str:
        entrada = entrada.lower()
        comandos_prosseguir = ["pr√≥ximo", "continue", "sim", "ok", "pode ser"]
        
        # 1. Checar se o usu√°rio quer continuar no t√≥pico atual
        if any(cmd in entrada for cmd in comandos_prosseguir) and self.topico_atual:
            usuario.avancar_passo(self.topico_atual.nome)
        
        # 2. Checar se o usu√°rio quer mudar de t√≥pico
        else:
            topico_encontrado = self._encontrar_topico(entrada)
            if topico_encontrado:
                self.topico_atual = topico_encontrado
            # Se n√£o encontrar t√≥pico e n√£o for comando, a resposta padr√£o √© acionada no final
        
        # 3. Se n√£o h√° um t√≥pico ativo, pede para o usu√°rio escolher um
        if not self.topico_atual:
            return "Por favor, escolha um dos t√≥picos de foco para come√ßarmos."

        # 4. Com um t√≥pico ativo, buscar o passo atual e gerar a resposta
        passo_atual_idx = usuario.obter_passo_atual(self.topico_atual.nome)
        passo_info = self.topico_atual.obter_passo(passo_atual_idx)

        if passo_info:
            resposta = (f"Certo, vamos falar sobre **{self.topico_atual.nome.upper()}** (Passo {passo_atual_idx + 1}/{len(self.topico_atual.passos)}).\n\n"
                        f"üëâ {passo_info['conselho']}\n\n"
                        f"ü§î {passo_info['pergunta']}\n"
                        f"   (Digite 'pr√≥ximo' para avan√ßar)")
            return resposta
        else:
            # Usu√°rio concluiu a jornada do t√≥pico
            conclusao = self.topico_atual.conclusao
            self.topico_atual = None # Reseta o t√≥pico para que ele escolha um novo
            return f"‚ú® **PARAB√âNS, {usuario.nome.upper()}!** ‚ú®\n{conclusao}\n\nQue tal escolhermos um novo t√≥pico para desenvolver?"


class SessaoMentoria:
    """ Orquestra a intera√ß√£o completa do usu√°rio com o mentor. """
    def __init__(self):
        self.mentor = Mentor()
        self.usuario = None

    def _display_boas_vindas(self):
        print("=" * 60)
        print("ü§ñ Bem-vindo ao TuperAI 2.0 - Seu Mentor de Jornada üöÄ")
        print("=" * 60)

    def iniciar(self):
        self._display_boas_vindas()
        nome_usuario = input("Para come√ßarmos, como gostaria de ser chamado? ").strip().capitalize()
        self.usuario = Usuario(nome_usuario)
        
        print(self.mentor.saudar(self.usuario))

        while True:
            try:
                entrada = input(f"\n{self.usuario.nome}: ").strip()
                if entrada.lower() in ['sair', 'exit', 'tchau', 'fim']:
                    print(f"\nMentor TuperAI: At√© a pr√≥xima, {self.usuario.nome}! Lembre-se que o progresso √© di√°rio. ‚ú®")
                    break
                
                if not entrada:
                    continue

                resposta_mentor = self.mentor.obter_resposta(entrada, self.usuario)
                
                print("\n" + "---" * 15)
                print(f"Mentor TuperAI: {resposta_mentor}")
                print("---" * 15)

            except (KeyboardInterrupt, EOFError):
                print(f"\n\nMentor TuperAI: Sess√£o encerrada. At√© logo, {self.usuario.nome}!")
                break

if __name__ == "__main__":
    sessao = SessaoMentoria()
    sessao.iniciar()